"use strict";
/* eslint-disable no-bitwise */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var constant_1 = require("./constant");
/**
 * Converts the text into an array of the characters numeric Unicode values
 * @param  {String} text, the text to convert
 * @return {Array} the array of Unicode values
 */
function convert(text) {
    var codes = [];
    for (var i = 0, ii = text.length; i < ii; i++) {
        codes.push(text.charCodeAt(i));
    }
    return codes;
}
/**
 * Sets up the key to use with the byte stream
 * @param  {String} key, The key that you want to use
 * @return {Array}, the key stream which with be used in the byteStreamGenerator
 */
function keySetup(_key) {
    var _a;
    var K = constant_1.CONST_ARR.slice();
    var j = 0;
    var key = convert(_key);
    for (var i = 0, ii = K.length; i < ii; i++) {
        j = (j + K[i] + key[i % key.length]) % 256;
        _a = [K[j], K[i]], K[i] = _a[0], K[j] = _a[1];
    }
    return K;
}
/**
 * byteStreamGenerator uses ES6 generators which will be 'XOR-ed' to encrypt and decrypt
 * @param {Array} K, the array generated from the keySetup
 * @yield {Integer}, the current value which will be 'XOR-ed' to encrypt or decrypt
 */
function byteStreamGenerator(K) {
    var i, j;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                i = 0;
                j = 0;
                _b.label = 1;
            case 1:
                if (!true) return [3 /*break*/, 3];
                i = (i + 1) % 256;
                j = (j + K[i]) % 256;
                _a = [K[j], K[i]], K[i] = _a[0], K[j] = _a[1];
                return [4 /*yield*/, (K[(K[i] + K[j]) % 256])];
            case 2:
                _b.sent();
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/];
        }
    });
}
var RC4Class = /** @class */ (function () {
    function RC4Class(key) {
        if (!key)
            console.error('Must pass the key to constructor');
        this.privateKey = keySetup(key);
        this.encryptKey = key;
    }
    RC4Class.prototype.encrypt = function (input) {
        if (!input)
            return console.log('no input of encrypt');
        var outputText = '';
        var byteStream = byteStreamGenerator(this.privateKey.slice());
        for (var i = 0, ii = input.length; i < ii; i++) {
            outputText += ("00" + (input.charCodeAt(i) ^ byteStream.next().value).toString(16)).substr(-2);
        }
        return outputText;
    };
    RC4Class.prototype.decrypt = function (_input) {
        if (!_input)
            return console.log('no input of decrypt');
        var outputText = '';
        var byteStream = byteStreamGenerator(this.privateKey.slice());
        var input = _input.match(/[a-z0-9]{2}/gi);
        for (var i = 0, ii = input.length; i < ii; i++) {
            outputText += String.fromCharCode((parseInt(input[i], 16) ^ byteStream.next().value));
        }
        return outputText;
    };
    return RC4Class;
}());
exports.default = RC4Class;
